{"version":3,"file":"pixi-tilemap.js","sourceRoot":"","sources":["../src/CanvasTileRenderer.ts","../src/CompositeRectTileLayer.ts","../src/Constant.ts","../src/GraphicsLayer.ts","../src/MultiTextureResource.ts","../src/RectTileLayer.ts","../src/RectTileShader.ts","../src/TileRenderer.ts","../src/ZLayer.ts","../src/exporter.ts","../src/shaderGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["namespace pixi_tilemap {\n\n    export class CanvasTileRenderer {\n        renderer: any;\n        tileAnim = [0, 0];\n        dontUseTransform = false;\n\n        constructor(renderer: any) {\n            this.renderer = renderer;\n            this.tileAnim = [0, 0];\n        }\n    }\n\n    const cr = (PIXI as any).CanvasRenderer;\n    if (cr) {\n        cr.registerPlugin('tilemap', CanvasTileRenderer);\n    }\n}\n","/// <reference types=\"pixi.js\" />\n\nnamespace pixi_tilemap {\n\n    export class CompositeRectTileLayer extends PIXI.Container {\n\n        constructor(zIndex?: number, bitmaps?: Array<PIXI.Texture>, texPerChild?: number) {\n            super();\n            this.initialize.apply(this, arguments);\n        }\n\n        updateTransform() {\n            (this as any).displayObjectUpdateTransform();\n        }\n\n        z: number;\n        zIndex: number;\n        modificationMarker = 0;\n        shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n        _globalMat: PIXI.Matrix = null;\n\n        texPerChild: number;\n\n        initialize(zIndex?: number, bitmaps?: Array<PIXI.Texture>, texPerChild?: number) {\n            if (texPerChild as any === true) {\n                //old format, ignore it!\n                texPerChild = 0;\n            }\n            this.z = this.zIndex = zIndex;\n            this.texPerChild = texPerChild || Constant.boundCountPerBuffer * Constant.maxTextures;\n            if (bitmaps) {\n                this.setBitmaps(bitmaps);\n            }\n        }\n\n        setBitmaps(bitmaps: Array<PIXI.Texture>) {\n            let texPerChild = this.texPerChild;\n            let len1 = this.children.length;\n            let len2 = Math.ceil(bitmaps.length / texPerChild);\n            let i: number;\n            for (i = 0; i < len1; i++) {\n                (this.children[i] as RectTileLayer).textures = bitmaps.slice(i * texPerChild, (i + 1) * texPerChild);\n            }\n            for (i = len1; i < len2; i++) {\n                let layer = new RectTileLayer(this.zIndex, bitmaps.slice(i * texPerChild, (i + 1) * texPerChild));\n                layer.compositeParent = true;\n                layer.offsetX = Constant.boundSize;\n                layer.offsetY = Constant.boundSize;\n                this.addChild(layer);\n            }\n        }\n\n        clear() {\n            for (let i = 0; i < this.children.length; i++) {\n                (this.children[i] as RectTileLayer).clear();\n            }\n            this.modificationMarker = 0;\n        }\n\n        addRect(textureIndex: number, u: number, v: number, x: number, y: number, tileWidth: number, tileHeight: number) {\n            const childIndex: number = textureIndex / this.texPerChild >> 0;\n            const textureId: number = textureIndex % this.texPerChild;\n\n            if (this.children[childIndex] && (this.children[childIndex] as RectTileLayer).textures) {\n                (this.children[childIndex] as RectTileLayer).addRect(textureId, u, v, x, y, tileWidth, tileHeight);\n            }\n        }\n\n        addFrame(texture_: PIXI.Texture | String | number, x: number, y: number, animX?: number, animY?: number) {\n            let texture: PIXI.Texture;\n            let layer: RectTileLayer = null;\n            let ind: number = 0;\n            let children = this.children;\n\n            if (typeof texture_ === \"number\") {\n                let childIndex = texture_ / this.texPerChild >> 0;\n                layer = children[childIndex] as RectTileLayer;\n\n                if (!layer) {\n                    layer = children[0] as RectTileLayer;\n                    if (!layer) {\n                        return false;\n                    }\n                    ind = 0;\n                } else {\n                    ind = texture_ % this.texPerChild;\n                }\n\n                texture = layer.textures[ind];\n            } else {\n                if (typeof texture_ === \"string\") {\n                    texture = PIXI.Texture.from(texture_);\n                } else {\n                    texture = texture_ as PIXI.Texture;\n                }\n\n                for (let i = 0; i < children.length; i++) {\n                    let child = children[i] as RectTileLayer;\n                    let tex = child.textures;\n                    for (let j = 0; j < tex.length; j++) {\n                        if (tex[j].baseTexture === texture.baseTexture) {\n                            layer = child;\n                            ind = j;\n                            break;\n                        }\n                    }\n                    if (layer) {\n                        break;\n                    }\n                }\n\n                if (!layer) {\n                    for (let i = 0; i < children.length; i++) {\n                        let child = children[i] as RectTileLayer;\n                        if (child.textures.length < this.texPerChild) {\n                            layer = child;\n                            ind = child.textures.length;\n                            child.textures.push(texture);\n                            break;\n                        }\n                    }\n                    if (!layer) {\n                        layer = new RectTileLayer(this.zIndex, texture);\n                        layer.compositeParent = true;\n                        layer.offsetX = Constant.boundSize;\n                        layer.offsetY = Constant.boundSize;\n                        children.push(layer);\n                        ind = 0;\n                    }\n                }\n            }\n\n            layer.addRect(ind, texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height, animX, animY);\n            return true;\n        }\n\n        renderCanvas(renderer: any) {\n            if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n                return;\n            }\n            let plugin = renderer.plugins.tilemap;\n            if (!plugin.dontUseTransform) {\n                let wt = this.worldTransform;\n                renderer.context.setTransform(\n                    wt.a,\n                    wt.b,\n                    wt.c,\n                    wt.d,\n                    wt.tx * renderer.resolution,\n                    wt.ty * renderer.resolution\n                );\n            }\n            let layers = this.children;\n            for (let i = 0; i < layers.length; i++) {\n                (layers[i] as RectTileLayer).renderCanvasCore(renderer);\n            }\n        }\n\n        render(renderer: PIXI.Renderer) {\n            if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n                return;\n            }\n            let plugin = (renderer.plugins as any)['tilemap'];\n            let shader = plugin.getShader();\n            renderer.batch.setObjectRenderer(plugin);\n            //TODO: dont create new array, please\n            this._globalMat = shader.uniforms.projTransMatrix;\n            renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\n            shader.uniforms.shadowColor = this.shadowColor;\n            shader.uniforms.animationFrame = plugin.tileAnim;\n            renderer.shader.bind(shader, false);\n            let layers = this.children;\n            for (let i = 0; i < layers.length; i++) {\n                (layers[i] as RectTileLayer).renderWebGLCore(renderer, plugin);\n            }\n        }\n\n        isModified(anim: boolean) {\n            let layers = this.children;\n            if (this.modificationMarker !== layers.length) {\n                return true;\n            }\n            for (let i = 0; i < layers.length; i++) {\n                if ((layers[i] as RectTileLayer).isModified(anim)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        clearModify() {\n            let layers = this.children;\n            this.modificationMarker = layers.length;\n            for (let i = 0; i < layers.length; i++) {\n                (layers[i] as RectTileLayer).clearModify();\n            }\n        }\n    }\n\n}\n","namespace pixi_tilemap {\n\n    export const Constant = {\n        maxTextures: 4,\n        bufferSize: 2048,\n        boundSize: 1024,\n        boundCountPerBuffer: 1,\n        use32bitIndex: false,\n        SCALE_MODE: PIXI.SCALE_MODES.LINEAR,\n        DO_CLEAR: true\n    }\n\n}\n","namespace pixi_tilemap {\n    class GraphicsLayer extends PIXI.Graphics {\n        constructor(zIndex: number) {\n            super();\n            this.zIndex = zIndex;\n        }\n\n        renderCanvas(renderer: any) {\n            let wt: PIXI.Matrix = null;\n            if (renderer.plugins.tilemap.dontUseTransform) {\n                wt = this.transform.worldTransform;\n                this.transform.worldTransform = PIXI.Matrix.IDENTITY;\n            }\n            renderer.plugins.graphics.render(this);\n            if (renderer.plugins.tilemap.dontUseTransform) {\n                this.transform.worldTransform = wt;\n            }\n            renderer.context.globalAlpha = 1.0;\n        }\n\n        // renderWebGL(renderer: PIXI.Renderer) {\n        //     if (!this._webGL[renderer.CONTEXT_UID])\n        //         this.dirty++;\n        //     super.renderWebGL(renderer)\n        // }\n\n        isModified(anim: boolean): boolean {\n            return false;\n        }\n\n        clearModify() {\n        }\n    }\n\n}\n","namespace pixi_tilemap {\n\texport interface IMultiTextureOptions {\n\t\tboundCountPerBuffer: number;\n\t\tboundSize: number;\n\t\tbufferSize: number;\n\t\tDO_CLEAR?: boolean;\n\t}\n\n\texport class MultiTextureResource extends PIXI.resources.Resource {\n\t\tconstructor(options: IMultiTextureOptions) {\n\t\t\tsuper(options.bufferSize, options.bufferSize);\n\n\t\t\tconst bounds = this.boundSprites;\n\t\t\tconst dirties = this.dirties;\n\t\t\tthis.boundSize = options.boundSize;\n\t\t\tfor (let j = 0; j < options.boundCountPerBuffer; j++) {\n\t\t\t\tconst spr = new PIXI.Sprite();\n\t\t\t\tspr.position.x = options.boundSize * (j & 1);\n\t\t\t\tspr.position.y = options.boundSize * (j >> 1);\n\t\t\t\tbounds.push(spr);\n\t\t\t\tdirties.push(0);\n\t\t\t}\n\t\t\tthis.DO_CLEAR = !!options.DO_CLEAR;\n\t\t}\n\n\t\tDO_CLEAR = false;\n\t\tboundSize: number = 0;\n\t\t_clearBuffer: Uint8Array = null;\n\n\t\tbind(baseTexture: PIXI.BaseTexture) {\n\t\t\tif (this.baseTex) {\n\t\t\t\tthrow new Error('Only one baseTexture is allowed for this resource!')\n\t\t\t}\n\t\t\tthis.baseTex = baseTexture;\n\t\t\tsuper.bind(baseTexture);\n\t\t}\n\n\t\tbaseTex: PIXI.BaseTexture = null;\n\t\tboundSprites: Array<PIXI.Sprite> = [];\n\t\tdirties: Array<number> = [];\n\n\t\tsetTexture(ind: number, texture: PIXI.Texture) {\n\t\t\tconst spr = this.boundSprites[ind];\n\t\t\tif (spr.texture.baseTexture === texture.baseTexture) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tspr.texture = texture;\n\t\t\tthis.baseTex.update();\n\t\t\tthis.dirties[ind] = (this.baseTex as any).dirtyId;\n\t\t}\n\n\t\tupload(renderer: PIXI.Renderer, texture: PIXI.BaseTexture, glTexture: PIXI.GLTexture) {\n\t\t\tconst { gl } = renderer as any;\n\n\t\t\tconst {width, height} = this;\n\t\t\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\tif (glTexture.dirtyId < 0) {\n\t\t\t\t(glTexture as any).width = width;\n\t\t\t\t(glTexture as any).height = height;\n\n\t\t\t\tgl.texImage2D(texture.target, 0,\n\t\t\t\t\ttexture.format,\n\t\t\t\t\twidth,\n\t\t\t\t\theight,\n\t\t\t\t\t0,\n\t\t\t\t\ttexture.format,\n\t\t\t\t\ttexture.type,\n\t\t\t\t\tnull);\n\t\t\t}\n\n\t\t\tconst doClear = this.DO_CLEAR;\n\t\t\tif (doClear && !this._clearBuffer) {\n\t\t\t\tthis._clearBuffer = new Uint8Array(Constant.boundSize * Constant.boundSize * 4);\n\t\t\t}\n\n\t\t\tconst bounds = this.boundSprites;\n\t\t\tfor (let i = 0; i < bounds.length; i++) {\n\t\t\t\tconst spr = bounds[i];\n\t\t\t\tconst tex = spr.texture.baseTexture;\n\t\t\t\tif (glTexture.dirtyId >= this.dirties[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst res = tex.resource as any;\n\t\t\t\tif (!tex.valid || !res || !res.source) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (doClear && (tex.width < this.boundSize || tex.height < this.boundSize))\n\t\t\t\t{\n\t\t\t\t\tgl.texSubImage2D(texture.target, 0,\n\t\t\t\t\t\tspr.position.x,\n\t\t\t\t\t\tspr.position.y,\n\t\t\t\t\t\tthis.boundSize,\n\t\t\t\t\t\tthis.boundSize,\n\t\t\t\t\t\ttexture.format,\n\t\t\t\t\t\ttexture.type,\n\t\t\t\t\t\tthis._clearBuffer);\n\t\t\t\t}\n\t\t\t\tgl.texSubImage2D(texture.target, 0,\n\t\t\t\t\tspr.position.x,\n\t\t\t\t\tspr.position.y,\n\t\t\t\t\ttexture.format,\n\t\t\t\t\ttexture.type,\n\t\t\t\t\tres.source);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n}","namespace pixi_tilemap {\n    export class RectTileLayer extends PIXI.Container {\n        constructor(zIndex: number, texture: PIXI.Texture | Array<PIXI.Texture>) {\n            super();\n            this.initialize(zIndex, texture);\n        }\n\n        zIndex = 0;\n        modificationMarker = 0;\n        shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n        _globalMat: PIXI.Matrix = null;\n\n        pointsBuf: Array<number> = [];\n        hasAnim = false;\n        textures: Array<PIXI.Texture>;\n\n        offsetX = 0;\n        offsetY = 0;\n        compositeParent = false;\n\n        initialize(zIndex: number, textures: PIXI.Texture | Array<PIXI.Texture>) {\n            if (!textures) {\n                textures = [];\n            } else if (!(textures instanceof Array) && (textures as PIXI.Texture).baseTexture) {\n                textures = [textures as PIXI.Texture];\n            }\n            this.textures = textures as Array<PIXI.Texture>;\n            this.zIndex = zIndex;\n            // this.visible = false;\n        }\n\n        clear() {\n            this.pointsBuf.length = 0;\n            this.modificationMarker = 0;\n            this.hasAnim = false;\n        }\n\n        addFrame(texture_: PIXI.Texture | String | number, x: number, y: number, animX: number, animY: number) {\n            let texture: PIXI.Texture;\n            let textureIndex = 0;\n\n            if (typeof texture_ === \"number\") {\n                textureIndex = texture_;\n                texture = this.textures[textureIndex];\n            } else {\n                if (typeof texture_ === \"string\") {\n                    texture = PIXI.Texture.from(texture_);\n                } else {\n                    texture = texture_ as PIXI.Texture;\n                }\n\n                let found = false;\n                let textureList = this.textures;\n                for (let i = 0; i < textureList.length; i++) {\n                    if (textureList[i].baseTexture === texture.baseTexture) {\n                        textureIndex = i;\n                        found = true;\n                        break;\n                    }\n                }\n\n                if (!found) {\n                    // textureIndex = this.textures.length;\n                    // this.textures.push(texture);\n                    return false;\n                }\n            }\n\n            this.addRect(textureIndex, texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height, animX, animY);\n            return true;\n        }\n\n        addRect(textureIndex: number, u: number, v: number, x: number, y: number, tileWidth: number, tileHeight: number, animX: number = 0, animY: number = 0) {\n            let pb = this.pointsBuf;\n            this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\n            if (tileWidth === tileHeight) {\n                pb.push(u);\n                pb.push(v);\n                pb.push(x);\n                pb.push(y);\n                pb.push(tileWidth);\n                pb.push(tileHeight);\n                pb.push(animX | 0);\n                pb.push(animY | 0);\n                pb.push(textureIndex);\n            } else {\n                let i: number;\n                if (tileWidth % tileHeight === 0) {\n                    //horizontal line on squares\n                    for (i = 0; i < tileWidth / tileHeight; i++) {\n                        pb.push(u + i * tileHeight);\n                        pb.push(v);\n                        pb.push(x + i * tileHeight);\n                        pb.push(y);\n                        pb.push(tileHeight);\n                        pb.push(tileHeight);\n                        pb.push(animX | 0);\n                        pb.push(animY | 0);\n                        pb.push(textureIndex);\n                    }\n                } else if (tileHeight % tileWidth === 0) {\n                    //vertical line on squares\n                    for (i = 0; i < tileHeight / tileWidth; i++) {\n                        pb.push(u);\n                        pb.push(v + i * tileWidth);\n                        pb.push(x);\n                        pb.push(y + i * tileWidth);\n                        pb.push(tileWidth);\n                        pb.push(tileWidth);\n                        pb.push(animX | 0);\n                        pb.push(animY | 0);\n                        pb.push(textureIndex);\n                    }\n                } else {\n                    //ok, ok, lets use rectangle\n                    pb.push(u);\n                    pb.push(v);\n                    pb.push(x);\n                    pb.push(y);\n                    pb.push(tileWidth);\n                    pb.push(tileHeight);\n                    pb.push(animX | 0);\n                    pb.push(animY | 0);\n                    pb.push(textureIndex);\n                }\n            }\n        }\n\n        renderCanvas(renderer: any) {\n            let plugin = renderer.plugins.tilemap;\n            if (!plugin.dontUseTransform) {\n                let wt = this.worldTransform;\n                renderer.context.setTransform(\n                    wt.a,\n                    wt.b,\n                    wt.c,\n                    wt.d,\n                    wt.tx * renderer.resolution,\n                    wt.ty * renderer.resolution\n                );\n            }\n            this.renderCanvasCore(renderer);\n        }\n\n        renderCanvasCore(renderer: any) {\n            if (this.textures.length === 0) return;\n            let points = this.pointsBuf;\n            renderer.context.fillStyle = '#000000';\n            for (let i = 0, n = points.length; i < n; i += 9) {\n                let x1 = points[i], y1 = points[i + 1];\n                let x2 = points[i + 2], y2 = points[i + 3];\n                let w = points[i + 4];\n                let h = points[i + 5];\n                x1 += points[i + 6] * renderer.plugins.tilemap.tileAnim[0];\n                y1 += points[i + 7] * renderer.plugins.tilemap.tileAnim[1];\n                let textureIndex = points[i + 8];\n                if (textureIndex >= 0) {\n                    renderer.context.drawImage(this.textures[textureIndex].baseTexture.source, x1, y1, w, h, x2, y2, w, h);\n                } else {\n                    renderer.context.globalAlpha = 0.5;\n                    renderer.context.fillRect(x2, y2, w, h);\n                    renderer.context.globalAlpha = 1;\n                }\n            }\n        }\n\n        vbId = 0;\n        vb: RectTileGeom = null;\n        vbBuffer: ArrayBuffer = null;\n        vbArray: Float32Array = null;\n        vbInts: Uint32Array = null;\n\n        destroyVb() {\n            if (this.vb) {\n                this.vb.destroy();\n                this.vb = null;\n            }\n        }\n\n        render(renderer: PIXI.Renderer) {\n            let plugin = (renderer.plugins as any)['tilemap'];\n            let shader = plugin.getShader();\n            renderer.batch.setObjectRenderer(plugin);\n            this._globalMat = shader.uniforms.projTransMatrix;\n            renderer.globalUniforms.uniforms.projectionMatrix.copyTo(this._globalMat).append(this.worldTransform);\n            shader.uniforms.shadowColor = this.shadowColor;\n            shader.uniforms.animationFrame = plugin.tileAnim;\n            renderer.shader.bind(shader, false);\n            this.renderWebGLCore(renderer, plugin);\n        }\n\n        renderWebGLCore(renderer: PIXI.Renderer, plugin: TileRenderer) {\n            let points = this.pointsBuf;\n            if (points.length === 0) return;\n            let rectsCount = points.length / 9;\n\n            let shader = plugin.getShader();\n            let textures = this.textures;\n            if (textures.length === 0) return;\n\n            plugin.bindTextures(renderer, shader, textures);\n\n            //lost context! recover!\n            let vb = this.vb;\n            if (!vb) {\n                vb = plugin.createVb();\n                this.vb = vb;\n                this.vbId = (vb as any).id;\n                this.vbBuffer = null;\n                this.modificationMarker = 0;\n            }\n\n            plugin.checkIndexBuffer(rectsCount, vb);\n            const boundCountPerBuffer = Constant.boundCountPerBuffer;\n\n            let vertexBuf = vb.getBuffer('aVertexPosition');\n            //if layer was changed, re-upload vertices\n            let vertices = rectsCount * vb.vertPerQuad;\n            if (vertices === 0) return;\n            if (this.modificationMarker !== vertices) {\n                this.modificationMarker = vertices;\n                let vs = vb.stride * vertices;\n                if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\n                    //!@#$ happens, need resize\n                    let bk = vb.stride;\n                    while (bk < vs) {\n                        bk *= 2;\n                    }\n                    this.vbBuffer = new ArrayBuffer(bk);\n                    this.vbArray = new Float32Array(this.vbBuffer);\n                    this.vbInts = new Uint32Array(this.vbBuffer);\n                    vertexBuf.update(this.vbBuffer);\n                }\n\n                let arr = this.vbArray, ints = this.vbInts;\n                //upload vertices!\n                let sz = 0;\n                //let tint = 0xffffffff;\n                let textureId: number = 0;\n                let shiftU: number = this.offsetX;\n                let shiftV: number = this.offsetY;\n\n                //let tint = 0xffffffff;\n                let tint = -1;\n                for (let i = 0; i < points.length; i += 9) {\n                    let eps = 0.5;\n                    if (this.compositeParent){\n                        if (boundCountPerBuffer > 1) {\n                            //TODO: what if its more than 4?\n                            textureId = (points[i + 8] >> 2);\n                            shiftU = this.offsetX * (points[i + 8] & 1);\n                            shiftV = this.offsetY * ((points[i + 8] >> 1) & 1);\n                        } else {\n                            textureId = points[i + 8];\n                            shiftU = 0;\n                            shiftV = 0;\n                        }\n                    }\n                    let x = points[i + 2], y = points[i + 3];\n                    let w = points[i + 4], h = points[i + 5];\n                    let u = points[i] + shiftU, v = points[i + 1] + shiftV;\n                    let animX = points[i + 6], animY = points[i + 7];\n                    arr[sz++] = x;\n                    arr[sz++] = y;\n                    arr[sz++] = u;\n                    arr[sz++] = v;\n                    arr[sz++] = u + eps;\n                    arr[sz++] = v + eps;\n                    arr[sz++] = u + w - eps;\n                    arr[sz++] = v + h - eps;\n                    arr[sz++] = animX;\n                    arr[sz++] = animY;\n                    arr[sz++] = textureId;\n                    arr[sz++] = x + w;\n                    arr[sz++] = y;\n                    arr[sz++] = u + w;\n                    arr[sz++] = v;\n                    arr[sz++] = u + eps;\n                    arr[sz++] = v + eps;\n                    arr[sz++] = u + w - eps;\n                    arr[sz++] = v + h - eps;\n                    arr[sz++] = animX;\n                    arr[sz++] = animY;\n                    arr[sz++] = textureId;\n                    arr[sz++] = x + w;\n                    arr[sz++] = y + h;\n                    arr[sz++] = u + w;\n                    arr[sz++] = v + h;\n                    arr[sz++] = u + eps;\n                    arr[sz++] = v + eps;\n                    arr[sz++] = u + w - eps;\n                    arr[sz++] = v + h - eps;\n                    arr[sz++] = animX;\n                    arr[sz++] = animY;\n                    arr[sz++] = textureId;\n                    arr[sz++] = x;\n                    arr[sz++] = y + h;\n                    arr[sz++] = u;\n                    arr[sz++] = v + h;\n                    arr[sz++] = u + eps;\n                    arr[sz++] = v + eps;\n                    arr[sz++] = u + w - eps;\n                    arr[sz++] = v + h - eps;\n                    arr[sz++] = animX;\n                    arr[sz++] = animY;\n                    arr[sz++] = textureId;\n                }\n\n                vertexBuf.update(arr);\n            }\n\n            (renderer.geometry as any).bind(vb, shader);\n            renderer.geometry.draw(PIXI.DRAW_MODES.TRIANGLES, rectsCount * 6, 0);\n        }\n\n        isModified(anim: boolean) {\n            if (this.modificationMarker !== this.pointsBuf.length ||\n                anim && this.hasAnim) {\n                return true;\n            }\n            return false;\n        }\n\n        clearModify() {\n            this.modificationMarker = this.pointsBuf.length;\n        }\n\n        destroy(options?: any) {\n            super.destroy(options);\n            this.destroyVb();\n        }\n    }\n\n}\n","namespace pixi_tilemap {\n\tlet rectShaderFrag = `\nvarying vec2 vTextureCoord;\nvarying vec4 vFrame;\nvarying float vTextureId;\nuniform vec4 shadowColor;\nuniform sampler2D uSamplers[%count%];\nuniform vec2 uSamplerSize[%count%];\n\nvoid main(void){\n   vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\n   float textureId = floor(vTextureId + 0.5);\n\n   vec4 color;\n   %forloop%\n   gl_FragColor = color;\n}\n`;\n\n\tlet rectShaderVert = `\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec4 aFrame;\nattribute vec2 aAnim;\nattribute float aTextureId;\n\nuniform mat3 projTransMatrix;\nuniform vec2 animationFrame;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vFrame;\n\nvoid main(void){\n   gl_Position = vec4((projTransMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n   vec2 anim = aAnim * animationFrame;\n   vTextureCoord = aTextureCoord + anim;\n   vFrame = aFrame + vec4(anim, anim);\n   vTextureId = aTextureId;\n}\n`;\n\n\texport abstract class TilemapShader extends PIXI.Shader {\n\t\tmaxTextures = 0;\n\n\t\tconstructor(maxTextures: number, shaderVert: string, shaderFrag: string) {\n\t\t\tsuper(\n\t\t\t\tnew PIXI.Program(\n\t\t\t\t\tshaderVert,\n\t\t\t\t\tshaderFrag),\n\t\t\t\t{\n\t\t\t\t\tanimationFrame: new Float32Array(2),\n\t\t\t\t\tuSamplers: [],\n\t\t\t\t\tuSamplerSize: [],\n\t\t\t\t\tprojTransMatrix: new PIXI.Matrix()\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis.maxTextures = maxTextures;\n\t\t\tshaderGenerator.fillSamplers(this, this.maxTextures);\n\t\t}\n\t}\n\n\texport class RectTileShader extends TilemapShader {\n\t\tconstructor(maxTextures: number) {\n\t\t\tsuper(\n\t\t\t\tmaxTextures,\n\t\t\t\trectShaderVert,\n\t\t\t\tshaderGenerator.generateFragmentSrc(maxTextures, rectShaderFrag)\n\t\t\t);\n\t\t\tshaderGenerator.fillSamplers(this, this.maxTextures);\n\t\t}\n\t}\n\n\texport class RectTileGeom extends PIXI.Geometry {\n\t\tvertSize = 11;\n\t\tvertPerQuad = 4;\n\t\tstride = this.vertSize * 4;\n\t\tlastTimeAccess = 0;\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tconst buf = this.buf = new PIXI.Buffer(new Float32Array(2), true, false);\n\t\t\tthis.addAttribute('aVertexPosition', buf, 0, false, 0, this.stride, 0)\n\t\t\t\t.addAttribute('aTextureCoord', buf, 0, false, 0, this.stride, 2 * 4)\n\t\t\t\t.addAttribute('aFrame', buf, 0, false, 0, this.stride, 4 * 4)\n\t\t\t\t.addAttribute('aAnim', buf, 0, false, 0, this.stride, 8 * 4)\n\t\t\t\t.addAttribute('aTextureId', buf, 0, false, 0, this.stride, 10 * 4);\n\t\t}\n\n\t\tbuf: PIXI.Buffer;\n\t}\n}\n","namespace pixi_tilemap {\n\t/*\n\t * Renderer for rectangle tiles.\n\t *\n\t * @class\n\t * @memberof PIXI.tilemap\n\t * @extends PIXI.ObjectRenderer\n\t * @param renderer {PIXI.WebGLRenderer} The renderer this sprite batch works for.\n\t */\n\n\texport class TileRenderer extends PIXI.ObjectRenderer {\n\t\trenderer: PIXI.Renderer;\n\t\tgl: WebGLRenderingContext;\n\t\tsn: number = -1;\n\t\tindexBuffer: PIXI.Buffer = null;\n\t\tibLen: number = 0;\n\t\ttileAnim = [0, 0];\n\t\ttexLoc: Array<number> = [];\n\n\t\trectShader: RectTileShader;\n\t\ttexResources: Array<MultiTextureResource> = [];\n\n\t\tconstructor(renderer: PIXI.Renderer) {\n\t\t\tsuper(renderer);\n\t\t\tthis.rectShader = new RectTileShader(Constant.maxTextures);\n\t\t\tthis.indexBuffer = new PIXI.Buffer(undefined, true, true);\n\t\t\tthis.checkIndexBuffer(2000);\n\t\t\tthis.initBounds();\n\t\t}\n\n\t\tinitBounds() {\n\t\t\tif (Constant.boundCountPerBuffer <= 1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst maxTextures = Constant.maxTextures;\n\t\t\tfor (let i = 0; i < maxTextures; i++) {\n\t\t\t\tconst resource = new MultiTextureResource(Constant);\n\t\t\t\tconst baseTex = new PIXI.BaseTexture(resource);\n\t\t\t\tbaseTex.scaleMode = Constant.SCALE_MODE;\n\t\t\t\tbaseTex.wrapMode = PIXI.WRAP_MODES.CLAMP;\n\t\t\t\tthis.texResources.push(resource);\n\t\t\t}\n\t\t}\n\n\t\tbindTexturesWithoutRT(renderer: PIXI.Renderer, shader: TilemapShader, textures: Array<PIXI.Texture>) {\n\t\t\tlet samplerSize: Array<number> = shader.uniforms.uSamplerSize;\n\t\t\tthis.texLoc.length = 0;\n\t\t\tfor (let i = 0; i < textures.length; i++) {\n\t\t\t\tconst texture = textures[i];\n\t\t\t\tif (!texture || !texture.valid) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\trenderer.texture.bind(textures[i], i);\n\t\t\t\t//TODO: add resolution here\n\t\t\t\tsamplerSize[i * 2] = 1.0 / textures[i].baseTexture.width;\n\t\t\t\tsamplerSize[i * 2 + 1] = 1.0 / textures[i].baseTexture.height;\n\t\t\t}\n\t\t\tshader.uniforms.uSamplerSize = samplerSize;\n\t\t}\n\n\t\tbindTextures(renderer: PIXI.Renderer, shader: TilemapShader, textures: Array<PIXI.Texture>) {\n\t\t\tconst len = textures.length;\n\t\t\tconst maxTextures = Constant.maxTextures;\n\t\t\tif (len > Constant.boundCountPerBuffer * maxTextures) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Constant.boundCountPerBuffer <= 1) {\n\t\t\t\tthis.bindTexturesWithoutRT(renderer, shader, textures);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet i = 0;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tconst texture = textures[i];\n\t\t\t\tif (!texture || !texture.valid) continue;\n\t\t\t\tconst multi = this.texResources[i >> 2];\n\t\t\t\tmulti.setTexture(i & 3, texture);\n\t\t\t}\n\n\t\t\tlet gltsUsed = (i + 3) >> 2;\n\t\t\tfor (i = 0; i < gltsUsed; i++) {\n\t\t\t\t//remove \"i, true\" after resolving a bug\n\t\t\t\trenderer.texture.bind(this.texResources[i].baseTex, i);\n\t\t\t}\n\t\t}\n\n\t\tstart() {\n\t\t\t//sorry, nothing\n\t\t}\n\n\t\tcreateVb() {\n\t\t\tconst geom = new RectTileGeom();\n\t\t\tgeom.addIndex(this.indexBuffer);\n\t\t\tgeom.lastTimeAccess = Date.now();\n\t\t\treturn geom;\n\t\t}\n\n\t\tcheckIndexBuffer(size: number, vb: RectTileGeom = null) {\n\t\t\tconst totalIndices = size * 6;\n\n\t\t\tif (totalIndices <= this.ibLen) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet len = totalIndices;\n\t\t\twhile (len < totalIndices) {\n\t\t\t\tlen <<= 1;\n\t\t\t}\n\n\t\t\tthis.ibLen = totalIndices;\n\t\t\tthis.indexBuffer.update((PIXI as any).utils.createIndicesForQuads(size, Constant.use32bitIndex));\n\n\t\t\t// \tTODO: create new index buffer instead?\n\t\t\t// if (vb) {\n\t\t\t// \tconst curIndex = vb.getIndex();\n\t\t\t// \tif (curIndex !== this.indexBuffer && (curIndex.data as any).length < totalIndices) {\n\t\t\t// \t\tthis.swapIndex(vb, this.indexBuffer);\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\n\t\t// swapIndex(geom: PIXI.Geometry, indexBuf: PIXI.Buffer) {\n\t\t\t// let buffers = (geom as any).buffers;\n\t\t\t// const oldIndex = geom.getIndex();\n\t\t\t// let ind = buffers.indexOf(oldIndex);\n\t\t\t// if (ind >= 0) {\n\t\t\t// \tbuffers.splice(ind, 1);\n\t\t\t// }\n\t\t\t// geom.addIndex(indexBuf);\n\t\t// }\n\n\t\tgetShader(): TilemapShader {\n\t\t\treturn this.rectShader;\n\t\t}\n\n\t\tdestroy() {\n\t\t\tsuper.destroy();\n\t\t\t// this.rectShader.destroy();\n\t\t\tthis.rectShader = null;\n\t\t}\n\t}\n\n\tPIXI.Renderer.registerPlugin('tilemap', TileRenderer as any);\n}\n","namespace pixi_tilemap {\n\n    export class ZLayer extends PIXI.Container {\n\n        constructor(tilemap: PIXI.Container, zIndex: number) {\n            super();\n            this.tilemap = tilemap;\n            this.z = zIndex;\n        }\n\n        tilemap: any;\n        z: number;\n        zIndex: number;\n        _previousLayers: number;\n        canvasBuffer: HTMLCanvasElement;\n        _tempRender: any;\n        _lastAnimationFrame: number = -1;\n        layerTransform: PIXI.Matrix;\n\n        clear() {\n            let layers = this.children as Array<CompositeRectTileLayer>;\n            for (let i = 0; i < layers.length; i++)\n                layers[i].clear();\n            this._previousLayers = 0;\n        }\n\n        cacheIfDirty() {\n            let tilemap: any = this.tilemap;\n            let layers = this.children as Array<CompositeRectTileLayer>;\n            let modified = this._previousLayers !== layers.length;\n            this._previousLayers = layers.length;\n            let buf = this.canvasBuffer;\n            let tempRender = this._tempRender;\n            if (!buf) {\n                buf = this.canvasBuffer = document.createElement('canvas');\n                tempRender = this._tempRender = new (PIXI as any).CanvasRenderer({width: 100, height: 100, view: buf});\n                tempRender.context = tempRender.rootContext;\n                tempRender.plugins.tilemap.dontUseTransform = true;\n            }\n            if (buf.width !== tilemap._layerWidth ||\n                buf.height !== tilemap._layerHeight) {\n                buf.width = tilemap._layerWidth;\n                buf.height = tilemap._layerHeight;\n                modified = true;\n            }\n            let i: number;\n            if (!modified) {\n                for (i = 0; i < layers.length; i++) {\n                    if (layers[i].isModified(this._lastAnimationFrame !== tilemap.animationFrame)) {\n                        modified = true;\n                        break;\n                    }\n                }\n            }\n            this._lastAnimationFrame = tilemap.animationFrame;\n            if (modified) {\n                if (tilemap._hackRenderer) {\n                    tilemap._hackRenderer(tempRender);\n                }\n                tempRender.context.clearRect(0, 0, buf.width, buf.height);\n                for (i = 0; i < layers.length; i++) {\n                    layers[i].clearModify();\n                    layers[i].renderCanvas(tempRender);\n                }\n            }\n            this.layerTransform = this.worldTransform;\n            for (i = 0; i < layers.length; i++) {\n                this.layerTransform = layers[i].worldTransform;\n                break;\n            }\n        }\n\n        renderCanvas(renderer: any) {\n            this.cacheIfDirty();\n            let wt = this.layerTransform;\n            renderer.context.setTransform(\n                wt.a,\n                wt.b,\n                wt.c,\n                wt.d,\n                wt.tx * renderer.resolution,\n                wt.ty * renderer.resolution\n            );\n            let tilemap = this.tilemap;\n            renderer.context.drawImage(this.canvasBuffer, 0, 0);\n        }\n    }\n}\n","/// <reference types=\"pixi.js\" />\n\nnamespace pixi_tilemap {\n\n    (PIXI as any).tilemap = pixi_tilemap;\n\n}\n","namespace pixi_tilemap.shaderGenerator {\n\n    export function fillSamplers(shader: TilemapShader, maxTextures: number) {\n        let sampleValues: Array<number> = [];\n        for (let i = 0; i < maxTextures; i++)\n        {\n            sampleValues[i] = i;\n        }\n        shader.uniforms.uSamplers = sampleValues;\n\n        let samplerSize: Array<number> = [];\n        for (let i = 0; i < maxTextures; i++) {\n            samplerSize.push(1.0 / Constant.bufferSize);\n            samplerSize.push(1.0 / Constant.bufferSize);\n        }\n        shader.uniforms.uSamplerSize = samplerSize;\n    }\n\n    export function generateFragmentSrc(maxTextures: number, fragmentSrc: string) {\n        return fragmentSrc.replace(/%count%/gi, maxTextures + \"\")\n            .replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\n    }\n\n    export function generateSampleSrc(maxTextures: number) {\n        let src = '';\n\n        src += '\\n';\n        src += '\\n';\n\n        src += 'if(vTextureId <= -1.0) {';\n        src += '\\n\\tcolor = shadowColor;';\n        src += '\\n}';\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            src += '\\nelse ';\n\n            if(i < maxTextures-1)\n            {\n                src += 'if(textureId == ' + i + '.0)';\n            }\n\n            src += '\\n{';\n            src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\n            src += '\\n}';\n        }\n\n        src += '\\n';\n        src += '\\n';\n\n        return src;\n    }\n\n}\n"]}